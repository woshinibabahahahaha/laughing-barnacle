#include<stdio.h>
#include<stdlib.h>
#define NULL ((node*)0)
typedef struct Node//定义node类型变量
{
	int data;
	struct Node* next;
	int index;
}node;
typedef struct//定义list类型变量
{
	int len;
	node* head;
}list;
node* seek(int n,list* lst)//定义函数seek寻找下标为n的点的地址
{
	node* temp = lst->head;
	for (int i = 0; i < lst->len; i++)
	{
		if (temp->index == n)
			return temp;
		temp = temp->next;
	}
	return NULL;
}
node* seekbynext(node* p, list* lst)
{
	node* u = lst->head;
	for (int i = 0; i < lst->len-1; i++)
	{
		if (u->next == p)
			return u;
		u = u->next;
	}
	return NULL;
}
int insert(node* p, node* q,list*lst)//定义函数insert将q指向的点插到p指向的点前面
{
	if (p == NULL || q == NULL || lst == NULL)
	{
		return -1; 
	}
	node* temp = q->next;
	q->next = p;
	if (lst->head == p)
	{
		lst->head = q;
	}
	else
	{
		node* prev = seekbynext(p, lst);
		if (prev != NULL)
		{
			prev->next = q;
		}
		else
		{
			return -1;
		}
	}
	if (temp != NULL)
	{
		node* i = seekbynext(q, lst);
		if (i != NULL)
		{
			i->next = temp;
		}
		else
		{
			return -1;
		}
	}
	return 0;
}
int main()
{
	list* lst = (list*)malloc(sizeof(list));
	if (lst == NULL)
	{
		printf("Memory allocation failed for list.\n");
		return -1;
	}
	lst->head = NULL;
	node* temp = NULL;
	node* pre = NULL;
	int len;
	printf("请输入一个正整数（链表元素个数）：\n");
	scanf_s("%d", &len);
	lst->len = len;
	for (int i = 0; i < len; i++)
	{
		node* Newnode = (node*)malloc(sizeof(node));
		if (Newnode == NULL)
		{
			printf("the space of lst is not got!\n");
			while (lst->head != NULL)
			{
				node* toFree = lst->head;
				lst->head = lst->head->next;
				free(toFree);
			}
			free(lst);
			return -1;
			
		}
		Newnode->index = i;
		printf("请输入一个数据(点的数值）：\n");
		scanf_s("%d", &Newnode->data);
		Newnode->next = NULL;
		if (lst->head == NULL)
		{
			lst->head = Newnode;
		}
		else
		{
			pre->next = Newnode;
		}
		pre = Newnode;
	}
	list* oushu = (list*)malloc(sizeof(list));
	list* jishu = (list*)malloc(sizeof(list));
	oushu->len = len / 2 + (len % 2);
	jishu->len = len / 2;
	jishu->head = NULL;
	oushu->head = NULL;
	node* pro_jishu = NULL;
	node* pro_oushu = NULL;
	int j = 0, o = 0;
	for (int s = 0; s < len; s++)
	{
		node* newNode = (node*)malloc(sizeof(node));
		newNode->data = lst->head->data;
		newNode->next = NULL;
		newNode->index = s;
		if (newNode->index % 2)
		{
			newNode->index = j;
			j += 1;
			if (jishu->head == NULL)
				jishu->head = newNode;
			else
				pro_jishu->next = newNode;
			pro_jishu = newNode;
		}
		else
		{
			newNode->index = o;
			o += 1;
			if (oushu->head == NULL)
				oushu->head = newNode;
			else
				pro_oushu->next = newNode;
			pro_oushu = newNode;
		}
		lst->head = lst->head->next;
	}
	pro_jishu->next = oushu->head;
	node* h = jishu->head;
	while (h != NULL) {
		printf("%d ", h->data);
		h = h->next;
	}
	while (lst->head != NULL)
	{
		node* next = lst->head->next;
		free(lst->head);
		lst->head = next;
	}
	free(lst);
	while (jishu->head != NULL) 
	{
		node* next = jishu->head->next;
		free(jishu->head);
		jishu->head = next;
	}
	free(jishu);
	while (oushu->head != NULL)
	{
		node* n = oushu->head->next;
		free(oushu->head);
		oushu->head = n;
	}
	free(oushu);
	return 0;
}

